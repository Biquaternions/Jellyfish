--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -570,55 +_,60 @@
 
     private void tickChunks(ProfilerFiller profiler, long timeInhabited, List<LevelChunk> chunks) {
         profiler.popPush("naturalSpawnCount");
-        int naturalSpawnChunkCount = this.distanceManager.getNaturalSpawnChunkCount();
+        // Jellyfish start - No need to spawn anything
+        // int naturalSpawnChunkCount = this.distanceManager.getNaturalSpawnChunkCount();
         // Paper start - Optional per player mob spawns
-        NaturalSpawner.SpawnState spawnState;
-        if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
-            // re-set mob counts
-            for (ServerPlayer player : this.level.players) {
-                // Paper start - per player mob spawning backoff
-                for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
-                    player.mobCounts[ii] = 0;
-
-                    int newBackoff = player.mobBackoffCounts[ii] - 1; // TODO make configurable bleed // TODO use nonlinear algorithm?
-                    if (newBackoff < 0) {
-                        newBackoff = 0;
-                    }
-                    player.mobBackoffCounts[ii] = newBackoff;
-                }
+        // NaturalSpawner.SpawnState spawnState;
+        // if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
+        //    // re-set mob counts
+        //    for (ServerPlayer player : this.level.players) {
+        //        // Paper start - per player mob spawning backoff
+        //        for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
+        //            player.mobCounts[ii] = 0;
+        //
+        //            int newBackoff = player.mobBackoffCounts[ii] - 1; // TODO make configurable bleed // TODO use nonlinear algorithm?
+        //            if (newBackoff < 0) {
+        //                newBackoff = 0;
+        //            }
+        //            player.mobBackoffCounts[ii] = newBackoff;
+        //        }
                 // Paper end - per player mob spawning backoff
-            }
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
-        } else {
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
-        }
+        //    }
+        //    spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
+        //} else {
+        //    spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
+        //}
         // Paper end - Optional per player mob spawns
-        this.lastSpawnState = spawnState;
+        // this.lastSpawnState = spawnState;
         profiler.popPush("spawnAndTick");
-        boolean _boolean = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
+        //boolean _boolean = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
         int _int = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-        List<MobCategory> filteredSpawningCategories;
-        if (_boolean && (this.spawnEnemies || this.spawnFriendlies)) {
-            // Paper start - PlayerNaturallySpawnCreaturesEvent
-            for (ServerPlayer entityPlayer : this.level.players()) {
-                int chunkRange = Math.min(level.spigotConfig.mobSpawnRange, entityPlayer.getBukkitEntity().getViewDistance());
-                chunkRange = Math.min(chunkRange, 8);
-                entityPlayer.playerNaturallySpawnedEvent = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(entityPlayer.getBukkitEntity(), (byte) chunkRange);
-                entityPlayer.playerNaturallySpawnedEvent.callEvent();
-            }
+        //List<MobCategory> filteredSpawningCategories;
+        //if (_boolean && (this.spawnEnemies || this.spawnFriendlies)) {
+        //   // Paper start - PlayerNaturallySpawnCreaturesEvent
+        //    for (ServerPlayer entityPlayer : this.level.players()) {
+        //        int chunkRange = Math.min(level.spigotConfig.mobSpawnRange, entityPlayer.getBukkitEntity().getViewDistance());
+        //        chunkRange = Math.min(chunkRange, 8);
+        //        entityPlayer.playerNaturallySpawnedEvent = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(entityPlayer.getBukkitEntity(), (byte) chunkRange);
+        //        entityPlayer.playerNaturallySpawnedEvent.callEvent();
+        //    }
             // Paper end - PlayerNaturallySpawnCreaturesEvent
-            boolean flag = this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && this.level.getLevelData().getGameTime() % this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
-            filteredSpawningCategories = NaturalSpawner.getFilteredSpawningCategories(spawnState, this.spawnFriendlies, this.spawnEnemies, flag, this.level); // CraftBukkit
-        } else {
-            filteredSpawningCategories = List.of();
-        }
+        //    boolean flag = this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && this.level.getLevelData().getGameTime() % this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
+        //    filteredSpawningCategories = NaturalSpawner.getFilteredSpawningCategories(spawnState, this.spawnFriendlies, this.spawnEnemies, flag, this.level); // CraftBukkit
+        //} else {
+        //    filteredSpawningCategories = List.of();
+        //}
+        // Jellyfish end - No need to spawn anything
 
         for (LevelChunk levelChunk : chunks) {
             ChunkPos pos = levelChunk.getPos();
             levelChunk.incrementInhabitedTime(timeInhabited);
-            if (!filteredSpawningCategories.isEmpty() && this.level.getWorldBorder().isWithinBounds(pos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(pos, true)) { // Spigot
-                NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState, filteredSpawningCategories);
-            }
+
+            // Jellyfish start - No need to spawn anything
+            // if (!filteredSpawningCategories.isEmpty() && this.level.getWorldBorder().isWithinBounds(pos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(pos, true)) { // Spigot
+            //     NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState, filteredSpawningCategories);
+            // }
+            // Jellyfish end - No need to spawn anything
 
             if (true) { // Paper - rewrite chunk system
                 this.level.tickChunk(levelChunk, _int);
@@ -626,9 +_,11 @@
         }
 
         profiler.popPush("customSpawners");
-        if (_boolean) {
-            this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
-        }
+        // Jellyfish start - No need to spawn anything
+        //if (_boolean) {
+        //    this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
+        //}
+        // Jellyfish end - No need to spawn anything
     }
 
     private void getFullChunk(long chunkPos, Consumer<LevelChunk> fullChunkGetter) {
